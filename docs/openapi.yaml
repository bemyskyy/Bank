openapi: 3.1.0
info:
  title: OpenAPI definition
  version: v0
servers:
  - url: http://localhost:8080
    description: Generated server url
paths:
  /api/users/{id}:
    get:
      tags:
        - user-controller
      operationId: getUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponse"
    put:
      tags:
        - user-controller
      operationId: updateUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponse"
    delete:
      tags:
        - user-controller
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
  /api/cards/{id}/block:
    put:
      tags:
        - card-controller
      operationId: blockCard
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
  /api/cards/{id}/activate:
    put:
      tags:
        - card-controller
      operationId: activateCard
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
  /api/block-requests/{id}/reject:
    put:
      tags:
        - block-request-controller
      operationId: reject
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/BlockRequestResponse"
  /api/block-requests/{id}/approve:
    put:
      tags:
        - block-request-controller
      operationId: approve
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/BlockRequestResponse"
  /api/users:
    get:
      tags:
        - user-controller
      operationId: getAllUsers
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserResponse"
    post:
      tags:
        - user-controller
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreateRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/UserResponse"
  /api/cards/transfer:
    post:
      tags:
        - card-controller
      operationId: transfer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransferRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/TransferResponse"
  /api/cards/create:
    post:
      tags:
        - card-controller
      operationId: createCard
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CardCreateRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/CardResponse"
  /api/block-requests/{cardId}:
    post:
      tags:
        - block-request-controller
      operationId: requestBlock
      parameters:
        - name: cardId
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/BlockRequestResponse"
  /api/auth/register:
    post:
      tags:
        - auth-controller
      operationId: registerUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /api/auth/login:
    post:
      tags:
        - auth-controller
      operationId: authenticateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AuthRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: object
  /api/cards:
    get:
      tags:
        - card-controller
      operationId: getAllCards
      parameters:
        - name: pageable
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Pageable"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PageCardResponse"
  /api/cards/user/{userId}:
    get:
      tags:
        - card-controller
      operationId: getUserCards
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
        - name: pageable
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Pageable"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PageCardResponse"
  /api/cards/status/{status}:
    get:
      tags:
        - card-controller
      operationId: getByStatus
      parameters:
        - name: status
          in: path
          required: true
          schema:
            type: string
            enum:
              - ACTIVE
              - BLOCKED
              - EXPIRED
        - name: pageable
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Pageable"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PageCardResponse"
  /api/cards/expiring-before/{date}:
    get:
      tags:
        - card-controller
      operationId: getByExpirationDate
      parameters:
        - name: date
          in: path
          required: true
          schema:
            type: string
            format: date
        - name: pageable
          in: query
          required: true
          schema:
            $ref: "#/components/schemas/Pageable"
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                $ref: "#/components/schemas/PageCardResponse"
  /api/block-requests/pending:
    get:
      tags:
        - block-request-controller
      operationId: getPending
      responses:
        "200":
          description: OK
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/BlockRequestResponse"
  /api/cards/{id}:
    delete:
      tags:
        - card-controller
      operationId: deleteCard
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        "200":
          description: OK
components:
  schemas:
    UserUpdateRequest:
      type: object
      properties:
        username:
          type: string
          maxLength: 50
          minLength: 3
        password:
          type: string
          maxLength: 100
          minLength: 6
        role:
          type: string
          enum:
            - USER
            - ADMIN
    UserResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        role:
          type: string
          enum:
            - USER
            - ADMIN
    BlockRequestResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        cardId:
          type: integer
          format: int64
        status:
          type: string
          enum:
            - PENDING
            - APPROVED
            - REJECTED
    UserCreateRequest:
      type: object
      properties:
        username:
          type: string
          maxLength: 50
          minLength: 3
        password:
          type: string
          maxLength: 100
          minLength: 6
        role:
          type: string
          enum:
            - USER
            - ADMIN
      required:
        - password
        - role
        - username
    TransferRequest:
      type: object
      properties:
        fromCardId:
          type: integer
          format: int64
          minimum: 1
        toCardId:
          type: integer
          format: int64
          minimum: 1
        amount:
          type: number
      required:
        - amount
        - fromCardId
        - toCardId
    TransferResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        fromCardNumber:
          type: string
        toCardNumber:
          type: string
        amount:
          type: number
        createdAt:
          type: string
          format: date-time
    CardCreateRequest:
      type: object
      properties:
        ownerId:
          type: integer
          format: int64
          minimum: 1
      required:
        - ownerId
    CardResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        maskedNumber:
          type: string
        expirationDate:
          type: string
          format: date
        status:
          type: string
          enum:
            - ACTIVE
            - BLOCKED
            - EXPIRED
        balance:
          type: number
    RegisterRequest:
      type: object
      properties:
        username:
          type: string
          maxLength: 50
          minLength: 3
        password:
          type: string
          maxLength: 100
          minLength: 6
      required:
        - password
        - username
    AuthRequest:
      type: object
      properties:
        username:
          type: string
          maxLength: 50
          minLength: 3
        password:
          type: string
          maxLength: 100
          minLength: 6
      required:
        - password
        - username
    Pageable:
      type: object
      properties:
        page:
          type: integer
          format: int32
          minimum: 0
        size:
          type: integer
          format: int32
          minimum: 1
        sort:
          type: array
          items:
            type: string
    PageCardResponse:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
        totalPages:
          type: integer
          format: int32
        first:
          type: boolean
        last:
          type: boolean
        size:
          type: integer
          format: int32
        content:
          type: array
          items:
            $ref: "#/components/schemas/CardResponse"
        number:
          type: integer
          format: int32
        sort:
          $ref: "#/components/schemas/SortObject"
        pageable:
          $ref: "#/components/schemas/PageableObject"
        numberOfElements:
          type: integer
          format: int32
        empty:
          type: boolean
    PageableObject:
      type: object
      properties:
        offset:
          type: integer
          format: int64
        sort:
          $ref: "#/components/schemas/SortObject"
        unpaged:
          type: boolean
        paged:
          type: boolean
        pageNumber:
          type: integer
          format: int32
        pageSize:
          type: integer
          format: int32
    SortObject:
      type: object
      properties:
        empty:
          type: boolean
        unsorted:
          type: boolean
        sorted:
          type: boolean